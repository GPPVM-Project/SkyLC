type Vec3 {
    x: float,
    y: float,
    z: float,
}

builtin attribute operator(str);

#[operator("add")]
internal def string_add(self: str, other: str) -> str {
    return self.concat(other);
}


#[operator("mul")]
internal def mul_vec3(self: float, other: Vec3) -> Vec3 {
    return Vec3(other.x * self, other.y * self, other.z * self);
}

#[operator("add")]
internal def add_vec3(self: float, other: Vec3) -> Vec3 {
    return Vec3(other.x + self, other.y + self, other.z + self);
}

#[operator("mul")]
internal def mul_float(self: Vec3, other: float) -> Vec3 {
    return Vec3(self.x * other, self.y * other, self.z * other);
}

#[operator("mul")]
internal def mul_int(self: Vec3, other: int) -> Vec3 {
    return Vec3(self.x * other, self.y * other, self.z * other);
}

#[operator("add")]
internal def add(self: Vec3, other: Vec3) -> Vec3 {
    return Vec3(self.x + other.x, self.y + other.y, self.z + other.z);
}

internal def length(self: Vec3) -> float {
    return (self.x * self.x + self.y * self.y + self.z * self.z).sqrt();
}

def main() -> void {
    let a = Vec3(1.0, 1.0, 1.0);
    let b = Vec3(7.0, 6.0, 5.0);

    println(("Hello".length().to_float() * a + b).length());
}
