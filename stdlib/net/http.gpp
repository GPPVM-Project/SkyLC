native def native_http_request(method: str, url: str, body: str) -> str;

pub type HttpResponse {
    status_code: int,
    body: str,
}

pub type HttpRequest {
    method: str,
    url: str,
    body: str,
}

pub type HttpRequestBuilder {
    method_: str,
    url_: str,
    body_: str,
}

pub def http_request_builder() -> HttpRequestBuilder {
    return HttpRequestBuilder("", "", "");
}

pub internal def method(self: HttpRequestBuilder, method: str) -> HttpRequestBuilder {
    return HttpRequestBuilder(method, self.url_, self.body_);
}

pub internal def url(self: HttpRequestBuilder, url: str) -> HttpRequestBuilder {
    return HttpRequestBuilder(self.method_, url, self.body_);
}

pub internal def body(self: HttpRequestBuilder, body: str) -> HttpRequestBuilder {
    return HttpRequestBuilder(self.method_, self.url_, body);
}

pub internal def build(self: HttpRequestBuilder) -> HttpRequest {
    return HttpRequest(self.method_, self.url_, self.body_);
}

pub def http_request(request: HttpRequest) -> HttpResponse {
    let { method, url, body } = request;

    let response = native_http_request(method, url, body);
    let idx = response.index_of("\n");

    if idx == -1 {
        return HttpResponse(0, response);
    }

    let code_str = response.sub_str(0, idx);
    let code = int(code_str);
    let body_text = response.sub_str(idx + 1, response.length());

    return HttpResponse(code, body_text);
}
