native def int_abs(x: int) -> int;
native def int_is_even(x: int) -> bool;
native def int_is_odd(x: int) -> bool;
native def int_sign(x: int) -> int;
native def int_max(a: int, b: int) -> int;
native def int_min(a: int, b: int) -> int;
native def int_clamp(x: int, min: int, max: int) -> int;
native def int_to_float(value: int) -> float;
native def int_sqrt(value: int) -> float;
native def int_to_string(value: int) -> str;

pub internal def abs(self: int) -> int {
    return int_abs(self);
}

pub internal def to_string(self: int) -> str{
    return int_to_string(self);
}

pub internal def sqrt(self: int) -> float{
    return int_sqrt(self);
}

pub internal def is_even(self: int) -> bool {
    return int_is_even(self);
}

pub internal def is_odd(self: int) -> bool {
    return int_is_odd(self);
}

pub internal def sign(self: int) -> int {
    return int_sign(self);
}

pub internal def clamp(self: int, min: int, max: int) -> int {
    return int_clamp(self, min, max);
}

pub internal def max(self: int, other: int) -> int {
    return int_max(self, other);
}

pub internal def min(self: int, other: int) -> int {
    return int_min(self, other);
}

pub internal def to_float(self: int) -> float {
    return int_to_float(self);
}

pub internal def pow(self: int, exp: int) -> int {
    let result = self;
    
    while exp > 1 {
        result = result * self;
        exp--;
    }

    return result;
}

#[operator("+")]
pub internal def add_str(self: int, other: str) -> str {
    return self.to_string() + other;
}

#[operator("+")]
pub internal def add_str(self: str, other: int) -> str {
    return self + other.to_string();
}