native def float_sqrt(f: float) -> float;
native def float_to_int(f: float) -> int;
native def float_to_string(f: float) -> str;

pub internal def sqrt(self: float) -> float {
    return float_sqrt(self);
}

pub internal def to_int(self: float) -> int {
    return float_to_int(self);
}

pub internal def pow(self: float, exp: int) -> float {
    let result = self;
    
    while exp > 1 {
        result = result * self;
        exp--;
    }

    return result;
}

#[operator("+")]
pub internal def add_str(self: float, other: str) -> str {
    return float_to_string(self) + other;
}

#[operator("+")]
pub internal def add_float(self: str, other: float) -> str {
    return self + float_to_string(other);
}